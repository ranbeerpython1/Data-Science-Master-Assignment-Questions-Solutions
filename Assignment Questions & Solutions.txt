

********************-------Assignment Questions & Solutions----------****************

Q1. What are the characteristics of the tuples? Is tuple immutable?

Ans: A tuple is an ordered, immutable, and heterogeneous collection of elements. This means that:

1. Ordered: The elements in a tuple have a specific order, and this order is maintained throughout the lifetime of the tuple.

2. Immutable: Once a tuple is created, its elements cannot be changed. This makes tuples useful for representing fixed, unchanging data.

3. Heterogeneous: The elements in a tuple can be of different data types, and this allows for a lot of flexibility when representing data.

In summary, tuples are similar to lists in that they are ordered collections of elements, but unlike lists, tuples are immutable and can contain elements of different data types.

Q2. What are the two tuple methods in python? Give an example of each method. Give a reason why
tuples have only two in-built methods as compared to Lists.

Ans: In Python, tuples have two in-built methods:

1. count(): This method takes an element as an argument and returns the number of times the element appears in the tuple.

Example:

t = (1, 2, 3, 2, 1)
print(t.count(2)) # Output: 2

2. index(): This method takes an element as an argument and returns the index of the first occurrence of the element in the tuple.

Example:
t = (1, 2, 3, 2, 1)
print(t.index(2)) # Output: 1

=> Tuples have only two in-built methods as compared to lists because tuples are meant to be simple and lightweight data structures for holding fixed and unchanging data. The count() and index() methods are the most commonly used operations on tuples, and these two methods are sufficient for the majority of use cases.

=> Additionally, the immutability of tuples makes it more efficient to store and retrieve data as compared to lists, which can be modified dynamically. The trade-off is that tuples have fewer methods available as compared to lists, but this trade-off is worth it in most cases because of the efficiency and simplicity that tuples offer.

Q3. Which collection datatypes in python do not allow duplicate items? Write a code using a set to remove
duplicates from the given list.
List = [1, 1, 1, 2, 1, 3, 1, 4, 2, 1, 2, 2, 2, 3, 2, 4, 3, 1, 3, 2, 3, 3, 3, 4, 4, 1, 4, 2, 4, 3, 4, 4]

Ans => In Python, the set data type is a collection that does not allow duplicate items. You can use a set to remove duplicates from a list as follows:

List = [1, 1, 1, 2, 1, 3, 1, 4, 2, 1, 2, 2, 2, 3, 2, 4, 3, 1, 3, 2, 3, 3, 3, 4, 4, 1, 4, 2, 4, 3, 4, 4]

# Convert the list to a set to remove duplicates
unique_set = set(List)

# Convert the set back to a list
unique_list = list(unique_set)

print(unique_list) # Output: [1, 2, 3, 4]

In this code, the list 'List' is converted to a set 'unique_set', which automatically removes any duplicate items. The resulting set is then converted back to a list 'unique_list' for easier use. The 'unique_list' contains only unique elements from the original 'List'.

Q5. What is a dictionary? Give an example. Also, state whether a dictionary is ordered or unordered.

Ans=> A dictionary in Python is an unordered collection of key-value pairs, where each key is associated with a value. Dictionaries are often used to represent real-world data, where each key represents a particular aspect of the data, and the corresponding value is the information associated with that aspect.

Example:

person = {'name': 'John Doe', 'age': 30, 'address': '123 Main St'}
print(person['name']) 
# Output: John Doe
print(person['age']) 
# Output: 30
print(person['address']) 
# Output: 123 Main St

In this example, the dictionary person has three key-value pairs, where the keys are 'name', 'age', and 'address', and the corresponding values are 'John Doe', 30, and '123 Main St', respectively.

Dictionaries in Python are unordered, meaning that the items in a dictionary do not have a specific order, and the order can change each time the dictionary is accessed. This makes dictionaries efficient for looking up values based on a key, but not ideal for operations that require a specific order.

Q6. Can we create a nested dictionary? If so, please give an example by creating a simple one-level
nested dictionary.

Ans=> Yes, you can create a nested dictionary in Python, which is a dictionary that contains other dictionaries as values. This allows you to represent more complex data structures with multiple levels of hierarchy.

Example:

employees = {
    'employee1': {'name': 'John Doe', 'age': 30, 'address': '123 Main St'},
    'employee2': {'name': 'Jane Doe', 'age': 25, 'address': '456 Market St'}
}

print(employees['employee1']['name']) # Output: John Doe
print(employees['employee2']['address']) # Output: 456 Market St

In this example, the dictionary employees contains two key-value pairs, where each key represents an employee and the corresponding value is another dictionary containing information about that employee. The nested dictionaries contain the keys 'name', 'age', and 'address', and the corresponding values are the name, age, and address of the employee. You can access the values in the nested dictionaries using the syntax employees[key1][key2].


Q7. Using setdefault() method, create key named topics in the given dictionary and also add the value of
the key as this list ['Python', 'Machine Learningâ€™, 'Deep Learning']
dict1 = {'language' : 'Python', 'course': 'Data Science Masters'}


Ans=> The setdefault() method in Python can be used to set a default value for a key in a dictionary if the key does not exist. You can use this method to create a key 'topics' in the dictionary dict1 and add the value ['Python', 'Machine Learning', 'Deep Learning'] to it as follows:

dict1 = {'language': 'Python', 'course': 'Data Science Masters'}

dict1.setdefault('topics', ['Python', 'Machine Learning', 'Deep Learning])

print(dict1) 
# Output: {'language': 'Python', 'course': 'Data Science Masters', 'topics': ['Python', 'Machine Learning', 'Deep Learning']}

In this code, the setdefault() method is used to set the default value of the key 'topics' to ['Python', 'Machine Learning', 'Deep Learning'] in the dictionary dict1. If the key 'topics' already exists in the dictionary, the value is not changed. The updated dictionary is then printed, which includes the key 'topics' with the specified value.

Q8. What are the three view objects in dictionaries? Use the three in-built methods in python to display
these three view objects for the given dictionary.
dict1 = {'Sport': 'Cricket' , 'Teams': ['India', 'Australia', 'England', 'South Africa', 'Sri Lanka', 'New Zealand']}

Ans=>In Python, dictionaries have three built-in view objects that allow you to access the keys, values, and key-value pairs in a dictionary. These view objects are:

1. keys(): This method returns a view object that displays a list of all the keys in the dictionary.

2. values(): This method returns a view object that displays a list of all the values in the dictionary.

3. items(): This method returns a view object that displays a list of all the key-value pairs in the dictionary as tuples.

Here's an example of how you can use these methods to display the view objects in the given dictionary dict1:

dict1 = {'Sport': 'Cricket' , 'Teams': ['India', 'Australia', 'England', 'South Africa', 'Sri Lanka', 'New Zealand']}

# Display the keys view object
keys = dict1.keys()
print("Keys: ", keys)
# Output: Keys:  dict_keys(['Sport', 'Teams'])

# Display the values view object
values = dict1.values()
print("Values: ", values) 

# Output: Values:  ['Cricket', ['India', 'Australia', 'England', 'South Africa', 'Sri Lanka', 'New Zealand']]

# Display the items view object
items = dict1.items()
print("Items: ", items) 
# Output: Items:  dict_items([('Sport', 'Cricket'), ('Teams', ['India', 'Australia', 'England', 'South Africa', 'Sri Lanka', 'New Zealand'])])

In this code, the keys(), values(), and items() methods are used to get the view objects for the keys, values, and key-value pairs in the dictionary dict1. The view objects are then printed, displaying the list of keys, values, and key-value pairs in the dictionary.








